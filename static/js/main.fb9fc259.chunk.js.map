{"version":3,"sources":["components/Header.js","components/Quote.js","components/Button.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","Quote","quote","className","Button","onClick","text","active","defaultProps","jsonArr","indexes","App","useState","setQuote","bgColor","prevBtnActive","setPrevActive","fetch","then","response","json","responseJson","catch","error","console","length","splice","newIndex","max","Math","floor","random","includes","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAQeA,EARA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACE,iCACE,6BAAKA,OCCIC,EAJD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OAAO,oBAAIC,UAAU,QAAd,SAAuBD,KCC1BE,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC/B,OACE,wBACEJ,UAAWI,EAAS,aAAe,eACnCF,QAASA,EAFX,SAIGC,KAIPF,EAAOI,aAAe,CACpBD,QAAQ,GAEKH,ICRXK,EDQWL,ICTXM,EAAU,GA0DCC,EA3CH,WACV,MAA0BC,mBAAS,mCAAnC,mBAAOV,EAAP,KAAcW,EAAd,KACA,EAA4BD,mBAAS,WAArC,mBAAOE,EAAP,KACA,GADA,KACuCF,oBAAS,IAAhD,mBAAOG,EAAP,KAAsBC,EAAtB,KAfOC,MACL,yIAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLZ,EAAUY,KAEXC,OAAM,SAACC,GACNC,QAAQD,MAAMA,MA8BlB,OACE,sBAAKpB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQA,UAAU,SAASH,MAAM,oCACjC,sBAAKG,UAAU,eAAf,UACE,cAAC,EAAD,CAAOA,UAAU,QAAQD,MAAOA,IAChC,cAAC,EAAD,CACEY,QAASA,EACTP,OAAQQ,EACRV,QAhBiB,WACnBK,EAAQe,OAAS,IACnBf,EAAQgB,OAAOhB,EAAQe,OAAS,EAAG,GACnCZ,EAASJ,EAAQC,EAAQA,EAAQe,OAAS,IAAIvB,OAC1CQ,EAAQe,QAAU,GAAGT,GAAc,KAanCV,KAAK,wBAEP,cAAC,EAAD,CAAQD,QA/BM,WAGlB,IAFA,IAAIsB,EACAC,EAAMnB,EAAQgB,OAEhBE,EAAWE,KAAKC,MAAMD,KAAKE,SAAWH,KAClClB,EAAQe,QAAUG,IAAQlB,EAAQsB,SAASL,KAEjDjB,EAAQuB,KAAKN,GACbd,EAASJ,EAAQkB,GAAUzB,OACvBQ,EAAQe,OAAS,GAAGT,GAAc,IAsBJV,KAAK,+BC9C5B4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.fb9fc259.chunk.js","sourcesContent":["const Header = ({ title }) => {\r\n  return (\r\n    <header>\r\n      <h1>{title}</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","const Quote = ({ quote }) => {\r\n  return <h2 className='quote'>{quote}</h2>\r\n}\r\n\r\nexport default Quote\r\n","import React from 'react'\r\n\r\nconst Button = ({ onClick, text, active }) => {\r\n  return (\r\n    <button\r\n      className={active ? 'btn active' : 'btn inactive'}\r\n      onClick={onClick}\r\n    >\r\n      {text}\r\n    </button>\r\n  )\r\n}\r\nButton.defaultProps = {\r\n  active: true,\r\n}\r\nexport default Button\r\n","import './App.css'\nimport { useState } from 'react'\nimport Header from './components/Header'\nimport Quote from './components/Quote'\nimport Button from './components/Button'\n\nvar indexes = []\nvar jsonArr\nconst getQuotesFromApi = () => {\n  return fetch(\n    'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json'\n  )\n    .then((response) => response.json())\n    .then((responseJson) => {\n      jsonArr = responseJson\n    })\n    .catch((error) => {\n      console.error(error)\n    })\n}\n\nconst App = () => {\n  const [quote, setQuote] = useState('Click button to generate quote!')\n  const [bgColor, setColor] = useState('#b8aeae')\n  const [prevBtnActive, setPrevActive] = useState(false)\n  getQuotesFromApi()\n\n  const changeQuote = () => {\n    let newIndex\n    let max = jsonArr.length\n    while (true) {\n      newIndex = Math.floor(Math.random() * max)\n      if (indexes.length >= max || !indexes.includes(newIndex)) break\n    }\n    indexes.push(newIndex)\n    setQuote(jsonArr[newIndex].quote)\n    if (indexes.length > 1) setPrevActive(true)\n  }\n\n  const getPreviousQuote = () => {\n    if (indexes.length > 1) {\n      indexes.splice(indexes.length - 1, 1)\n      setQuote(jsonArr[indexes[indexes.length - 1]].quote)\n      if (indexes.length <= 1) setPrevActive(false)\n    }\n  }\n\n  return (\n    <div className='App'>\n      <Header className='header' title='Random quote from API generator' />\n      <div className='main-wrapper'>\n        <Quote className='quote' quote={quote} />\n        <Button\n          bgColor={bgColor}\n          active={prevBtnActive}\n          onClick={getPreviousQuote}\n          text='Get previous quote!'\n        />\n        <Button onClick={changeQuote} text='Generate new quote!' />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}